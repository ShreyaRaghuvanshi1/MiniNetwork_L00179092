Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: This is a common VPC which will consist of every resource
  PubSubnetCIDR1:
    Type: String
    Default: 10.0.1.0/24
    Description: Public Subnet CIDR for AZ 1
  PvtSubnetCIDR1:
    Type: String
    Default: 10.0.2.0/24
    Description: Private Subnet CIDR for AZ 1
  PubSubnetCIDR2:
    Type: String
    Default: 10.0.3.0/24
    Description: Public Subnet CIDR for AZ 2
  PvtSubnetCIDR2:
    Type: String
    Default: 10.0.4.0/24
    Description: Private Subnet CIDR for AZ 2
  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server and web app using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: new_key
  InstanceType:
    Type: String
    Default: t2.micro
  DBName:
    Default: ProductionDB
    Description: Database name
    Type: String
    MinLength: '1'
    MaxLength: '50'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  DBUser:
    Description: Username for Admin
    Type: String
    MinLength: '1'
    MaxLength: '50'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
  DBPassword:
    NoEcho: 'true'
    Description: Password for Admin
    Type: String
    MinLength: '6'
    MaxLength: '25'
    AllowedPattern: '^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[#$%^&+=!]).{8,}$'
  DBInstanceClass:
    Default: db.t2.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type. 
  DBAllocatedStorage:
    Default: '8'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '2'
    MaxValue: '25'
    ConstraintDescription: must be between 05 and 20 GiB.
Resources:

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR

  PubSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PubSubnetCIDR1
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true

  PvtSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PvtSubnetCIDR1
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: false

  PubSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PubSubnetCIDR2
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: true

  PvtSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PvtSubnetCIDR2
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      MapPublicIpOnLaunch: false

  InternetGW:
    Type: 'AWS::EC2::InternetGateway'

  Gateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGW

  PubRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PubRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGW

  PubSubnet1RTA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PubSubnet1

  PubSubnet2RTA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PubSubnet2

  SecurityGroupWebApp:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  SecurityGroupJumpbox:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  SecurityGroupWebServer:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  SecurityGroupDataBase:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !Ref SecurityGroupWebServer
      VpcId: !Ref VPC

  EC2WebAppAZ1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SubnetId:
        Ref: PubSubnet1
      ImageId: ami-05c13eab67c5d8861
      SecurityGroupIds: - !GetAtt "SecurityGroupWebApp.GroupId"
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureSampleApp
        ConfigureSampleApp:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join 
                - |+

                - - >-
                    <h1>This is a sample WebServer created by Shreya Raghuvanshi</h1>
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
  EC2DataBase2AZ1:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName:
        Ref: DBName
      MasterUsername: 
        Ref: DBUser
      MasterUserPassword: 
        Ref: DBPassword
      Engine: MySQL
      AvailabilityZone: us-east-1a
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage

  EC2WebServer1AZ2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SubnetId:
        Ref: PubSubnet2
      ImageId: ami-05c13eab67c5d8861
      SecurityGroupIds: 
          - !GetAtt "SecurityGroupWebServer.GroupId"
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureSampleApp
        ConfigureSampleApp:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: !Join 
                - |+

                - - >-
                    <h1>This is a sample WebServer created by Shreya Raghuvanshi</h1>
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
  EC2JumpBox2AZ2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SubnetId:
        Ref: PvtSubnet2
      ImageId: ami-05c13eab67c5d8861
