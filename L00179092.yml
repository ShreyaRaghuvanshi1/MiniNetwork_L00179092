Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: This is a common VPC which will consist of every resource
  PubSubnetCIDR1:
    Type: String
    Default: 10.0.1.0/24
    Description: Public Subnet CIDR for AZ 1
  PvtSubnetCIDR1:
    Type: String
    Default: 10.0.2.0/24
    Description: Private Subnet CIDR for AZ 1
  PubSubnetCIDR2:
    Type: String
    Default: 10.0.3.0/24
    Description: Public Subnet CIDR for AZ 2
  PvtSubnetCIDR2:
    Type: String
    Default: 10.0.4.0/24
    Description: Private Subnet CIDR for AZ 2
  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server and web app using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: new_key
  InstanceType:
    Type: String
    Default: t2.micro
  DBName:
    Default: ProductionDB
    Description: Database name
    Type: String
    MinLength: '1'
    MaxLength: '50'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must start with a letter (either lowercase or uppercase) followed by zero or more characters, which can be letters or digits.
  DBUser:
    Description: Username for Admin
    Type: String
    MinLength: '1'
    MaxLength: '50'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must start with a letter (either lowercase or uppercase) followed by zero or more characters, which can be letters or digits.
  DBPassword:
    NoEcho: 'true'
    Description: Password for Admin
    Type: String
    MinLength: '6'
    MaxLength: '25'
    AllowedPattern: '^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[#$%^&+=!]).{8,}$'
    ConstraintDescription: The password must contain at least one uppercase letter, at least one lowercase letter, at least one digit, at least one special character and at least 8 characters in length.
  DBInstanceClass:
    Default: db.t2.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type. 
  DBAllocatedStorage:
    Default: '8'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '2'
    MaxValue: '25'
    ConstraintDescription: Must be between 02 and 25 GiB.

Mappings: 
  RegionMap: 
    us-east-1: 
      HVM64: ami-05c13eab67c5d8861
    us-west-1: 
      HVM64: ami-010f8b02680f80998
    eu-west-1: 
      HVM64: ami-0e309a5f3a6dd97ea
    ap-southeast-1: 
      HVM64: ami-05caa5aa0186b660f
    ap-northeast-1: 
      HVM64: ami-098940df4d3292e9a
      
Resources:

  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: VPC

  PubSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PubSubnetCIDR1
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PvtSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PvtSubnetCIDR1
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PubSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PubSubnetCIDR2
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PvtSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !Ref PvtSubnetCIDR2
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2

  InternetGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: IGW

  GatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGW

  PubRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route table

  PubRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PubRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGW

  PubSubnet1RTA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PubSubnet1

  PubSubnet2RTA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PubRouteTable
      SubnetId: !Ref PubSubnet2

  SecurityGroupWebApp:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroupLB
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref SecurityGroupLB
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Security Group for WebApp


  SecurityGroupLB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0   
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0   
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Security Group for LB

  SecurityGroupWebServer:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroupLB
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref SecurityGroupLB
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Security Group for WebServer

  SecurityGroupDataBase:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !Ref SecurityGroupWebServer
      Tags:
        - Key: Name
          Value: Security Group for DataBase
      VpcId: !Ref VPC

  EC2WebAppAZ1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SubnetId:
        Ref: PubSubnet1
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      SecurityGroupIds: 
        - !Ref SecurityGroupWebApp
      Tags:
        - Key: Name
          Value: EC2 for Web App
      UserData:
        Fn::Base64: |
          #!/bin/bash
         
          echo "<html><h1>WebServer created by Shreya Raghuvanshi</h1></html>" > /var/www/html/web.html
          

  RDSDBSubnetGroup:
    Properties: 
      DBSubnetGroupDescription: This is subnet group for Database
      SubnetIds: 
        - Ref: PvtSubnet1
        - Ref: PvtSubnet2
        - Ref: PubSubnet1
      Tags: 
        - 
          Key: Name
          Value: RdsSubnetGroup
    Type: "AWS::RDS::DBSubnetGroup"

  EC2DataBase2AZ1:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName:
        Ref: DBName
      MasterUsername: 
        Ref: DBUser
      MasterUserPassword: 
        Ref: DBPassword
      Engine: MySQL
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: Instance for Data Base
      Port: 3306
      DBSubnetGroupName: !Ref RDSDBSubnetGroup

      

  EC2WebServer1AZ2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SubnetId:
        Ref: PubSubnet2
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      SecurityGroupIds: 
        - !Ref SecurityGroupWebServer
      Tags:
        - Key: Name
          Value: EC2 for Web Server
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          yum -y install httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<html><h1>WebServer created by Shreya Raghuvanshi</h1></html>" > /var/www/html/index.html

  LoadBalancerAZ2:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - Ref: PvtSubnet2
        - Ref: PvtSubnet1
      Tags:
        - Key: Name
          Value: LB
      SecurityGroups: 
        - !Ref SecurityGroupLB
